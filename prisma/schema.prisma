// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Post {
  id Int @id @default(autoincrement())
  title String @db.VarChar(255)
  content String?
  published Boolean @default(false)

  tags TagOnPosts[]

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posts")
}

model Tag {
  id Int @id @default(autoincrement())
  name String @unique
  posts TagOnPosts[]

  @@map("categoriesPost")
}

model TagOnPosts {
  id Int @id @default(autoincrement())
  post Post? @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tag Tag? @relation(fields: [tagId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postId Int?
  tagId Int?
}

model Plan {
  id Int @id @default(autoincrement())
  name String
  price Decimal
  speed Int
  features String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("plans")
}

model Profile {
  id Int @id @default(autoincrement())
  bio String?
  user User @relation(fields: [userId], references: [id])
  userId Int @unique

  @@map("profiles")
}

model Token {
  id Int @id @default(autoincrement())
  token String?
  user User @relation(fields: [userId], references: [id])
  userId Int @unique

  @@map("tokens")
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  username String @unique()
  password String
  verified Boolean @default(false)
  firstName String?
  lastName String?
  mobile String?
  address String?
  
  posts Post[]
  profile Profile?

  roles RolUser[]

  token Token?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Rol {
  id Int @id @default(autoincrement())
  name String @unique
  users RolUser[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("roles")
}

model RolUser {
  userId Int
  rolId Int
  addedAt DateTime? @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rol Rol @relation(fields: [rolId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([rolId, userId])
  @@index([userId], name: "userId")
  @@map("roles_user")
}
